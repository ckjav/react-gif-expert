{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","respFetch","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAmCeA,EAhCY,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAiB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAO,GACxBR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OAExCN,EAAc,KAMd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGKI,MAAMF,GAHX,cAGbG,EAHa,gBAIEA,EAAUC,OAJZ,uBAIZC,EAJY,EAIZA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OADAc,QAAQC,MAEJ,sBAAKC,UAAU,yCAAf,UAEI,qBACIC,IAAKjB,EACLkB,IAAKR,IAET,4BAAIA,QCPHS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDZ,SAACA,GAAc,IAAD,EACXd,mBAAS,CAC/BqB,KAAK,GACLe,SAAQ,IAHyB,mBAC9BC,EAD8B,KACvBC,EADuB,KAkBrC,OAZAC,qBAAU,WACN1B,EAAQC,GACH0B,MAAK,SAAAC,GACFH,EAAS,CACLjB,KAAKoB,EACLL,SAAQ,SAIrB,CAACtB,IAGGuB,EDhBuBK,CAAY5B,GAA9Ba,EADuB,EAC5BN,KAAYe,EADgB,EAChBA,QAEnB,OACI,qCACA,6BAAKtB,IACJsB,GAAW,mBAAGJ,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAEQL,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEXpBkB,EAAe,WAAO,IAAD,EACM3C,mBAAS,CAAC,eADhB,mBACvB4C,EADuB,KACX7C,EADW,KAS9B,OACI,qCAEI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEQ6C,EAAWrB,KAAI,SAAAT,GAAQ,OAAK,cAAC,EAAD,CAExBA,SAAWA,GADNA,Y,MCd7B+B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.0578c912.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({ setCategories }) => {\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(inputValue.trim().length>2){\n            setCategories(cats=> [inputValue,...cats] );\n        }\n        setInputValue('');\n    }\n \n\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n    )\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","export const getGifs = async (category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)  }&limit=10&api_key=A96FhG0vHwQk4gXGI7kOfoqrf1QdCg1G`;\n    const respFetch = await fetch(url);\n    const {data} = await respFetch.json(); \n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        };\n    });\n     \n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url}) => {\n    console.log();\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            \n            <img\n                src={url} \n                alt={title}\n            />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGif } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n    const {data:images,loading} = useFetchGif(category);\n    \n    return (\n        <>\n        <h3>{category}</h3>\n        {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\n        <div className=\"card-grid\">\n            {\n                images.map((img) => (\n                    <GifGridItem\n                        key={img.id}\n                        {...img}\n                        />\n                ))\n            }\n        </div>\n        </>\n    )\n}","import {useEffect, useState} from 'react';\nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGif = (category) => {\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    });\n    \n    useEffect(() => {\n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data:imgs,\n                    loading:false\n                });\n                \n            });\n    }, [category]);\n\n\n    return state;\n}","import React, {useState} from 'react'\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    const [categories, setCategories] = useState(['Evangelion']);\n\n    // const handleAdd = () => {\n    //     // categories.push('Evangelion')\n    //     setCategories(cats => [...categories, 'Evangelion']);\n    //     // console.log(categories);\n    // }\n\n    return (\n        <>\n            {/* <button onClick={handleAdd}>Agregar</button> */}\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n            <ol>\n                {\n                    categories.map(category => (<GifGrid \n                        key={category}\n                        category={ category }/>) )\n                }\n            </ol>\n        </>\n        \n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GifExpertApp />, \n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}